// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id        Int      @id @default(autoincrement())
  secretId  String   @unique @default(cuid())
  email     String   @unique
  password  String
  role      Role     @default(USER)
  isLogged Boolean @default(false)
  profile   Profile? // User may or may not have a profile

  // LOGGING DATA
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLoggedInAt DateTime?   // Aikaleima käyttäjän viime sisäänkirjautumisesti
  lastLoggedOutAt DateTime? // Aikaleima käyttäjän viimeisestä uloskirjautumisesta

}

model Profile {
  profileId      Int    @id @default(autoincrement())
  userId Int @unique
  user    User   @relation(fields: [userId], references: [id])
  firstName String?
  lastName String?
  age Int?
  sex String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model Pet {
//   id          Int       @id @default(autoincrement())
//   name        String    @unique  // Pet must have unique name
//   animal      Animal?
//   age         Int?      // Int or String?
//   weight      Int?
//   weightUnit  Unit?
//   owner       User      @relation(fields: [ownerId], references: [id])
//   ownerId     Int       // Reference to the owner's id in the User model
//   cat         Cat?
//   dog         Dog?
//   horse       Horse?
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime  @updatedAt
// }

// enum Unit {
//   G
//   KG
//   KT
//   LB
// }

// // Define the Species model


// enum Animal {
//   CAT
//   DOG
//   HORSE
//   SHEEP
// }

// // Define the Cat model
// model Cat {
//   id           Int       @id @default(autoincrement())
//   pet          Pet       @relation(fields: [petId], references: [id])
//   petId        Int       @unique
//   // Add fields specific to cats here
//   catBreed     String?
//   hairLength   String?
//   hairColor    String?
//   temperament  String?
//   vaccines     String?
//   createdAt    DateTime  @default(now())
//   updatedAt    DateTime  @updatedAt
// }

// // Define the Dog model
// model Dog {
//   id           Int       @id @default(autoincrement())
//   pet          Pet       @relation(fields: [petId], references: [id])
//   petId        Int       @unique
//   // Add fields specific to dogs here
//   dogBreed     String?
//   hairLength   String?
//   hairColor    String?
//   temperament  String?
//   vaccines     String?
//   // meta
//   createdAt    DateTime  @default(now())
//   updatedAt    DateTime  @updatedAt
// }

// model Horse {
//   id  Int   @id @default(autoincrement())
//   pet Pet   @relation(fields: [petId], references: [id])
//   petId Int @unique
//   // Add fields specific to horse here
//   horseBreed  String?
//   hairColor String?
//   working Boolean
//   // meta
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
// }

// model Test {
//   id String @id @default(cuid())
//   title String?
//   content String?
//   message String?
//   publish Boolean
//   createdAt DateTime @default(now())
//   updatedAt DateTime  @updatedAt
// }